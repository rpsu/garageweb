#!/usr/bin/env bash
# /etc/init.d/garage
### BEGIN INIT INFO
# Provides:          garage
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Garage door management at boot time
# Description:       Enable Garage door management and logging service provided by daemon.
### END INIT INFO

# ***************** #
# *** IMPORTANT *** #
# ***************** #
# Required-Start MUST BE $all, in order to this script start only after all other services
# have been started. If not the service will boot before the GPIO pins control is up,
# and the control starting will open the relay behind PIN 11 (ie. "press the open button" and
# hence open the door).

# USAGE:
# 1. Save this file to the Raspberry Pi as
# /etc/init.d/garage
# 2. Then register the script with
# $ sudo update-rc.d garage defaults
# 3. Run as root
# $ sudo sh /etc/init.d/garage

USER_ID=$(id -u)
if [ "$USER_ID" -ne "0" ]; then
  echo This script must be run as a root.
  exit 0
fi

case "$1" in
start)
  echo "Delay garage start to allow Pi with camera module wake up."
  sleep 5
  $0 start-web
  $0 start-door
  ;;

stop)
  $0 stop-web
  $0 stop-door
  ;;

status)
  F=doorWebUI.py
  PID=$(ps -ef | grep web.py | grep python | awk {'print $2'} | xargs)
  if [ -f /var/run/garage.${F}.pid ] && [ ! -z "$PID" ]; then
    echo "${F} is already running (pid file exists, prcesses running: $PID )."
  else
    echo "${F} is not running."
  fi

  F=dooService.py
  PID=$(ps -ef | grep door.py | grep python | awk {'print $2'} | xargs)
  if [ -f /var/run/garage.${F}.pid ] && [ ! -z "$PID" ]; then
    echo "${F} is already running (pid file exists, prcesses running: $PID )."
  else
    echo "${F} is not running."
  fi
  ;;

restart)
  $0 stop
  $0 start
  ;;

start-door)
  echo "Starting Door monitor"
  F=doorService.py
  if [ -f /var/run/garage.${F}.pid ]; then
    echo "${F} is already running (pid file exists)."
    exit 1
  fi
  python /home/pi/GarageWeb/${F} &
  PID=$!
  echo $PID ${F} started
  echo $PID >/var/run/garage.${F}.pid
  ;;

start-web)
  echo "Starting Web monitor"
  F=doorWebUI.py
  if [ -f /var/run/garage.${F}.pid ]; then
    echo "${F} is already running (pid file exists)."
    exit 1
  fi
  python /home/pi/GarageWeb/${F} &
  PID=$!
  echo $PID ${F} started
  echo $PID >/var/run/garage.${F}.pid
  ;;

stop-door)
  echo "Stopping Door monitor"
  F=doorService.py
  if [ -f /var/run/garage.${F}.pid ]; then
    PID=$(cat /var/run/garage.${F}.pid)
    echo Kill ${F} process "$PID"
    pkill -F /var/run/garage.${F}.pid || echo Killing PID "$PID" failed.
    rm /var/run/garage.${F}.pid || echo Removing PID "$PID" failed.
  fi
  ;;

stop-web)
  echo "Stopping Garage Web"
  F=doorWebUI.py
  if [ -f /var/run/garage.${F}.pid ]; then
    PID=$(cat /var/run/garage.${F}.pid)
    echo Kill ${F} process "$PID"
    pkill -F /var/run/garage.${F}.pid || echo Killing PID "$PID" failed.
    rm /var/run/garage.${F}.pid || echo Removing PID "$PID" failed.
  fi
  PID=$(ps -ef | grep web.py | grep python | awk {'print $2'})
  if [ -n "$PID" ]; then
    echo Kill Flask Python app, PID "$PID"
    kill "$PID"
  fi
  ;;

help | *)
  echo "Usage:"
  echo "service garage {start|stop|restart|start-web|start-door|stop-web|stop-door|status|help}"
  ;;
esac

exit 0
